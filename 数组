一、数组定义
  var arr = [1,2,3];(var arr = new Array(1,2,3));
二、数组长度
  数组的length属性：获取当前数组的长度
  arr.length => 3
  快速清空数组的方法：
  arr.length = 0;
三、添加和删除元素
  1.push(arg)：在数组的末尾追加arg元素。
    arr.push(["a","b"]) => [1,2,3,"a","b"]
  2.pop()：在数组末尾删除一个元素，并返回这个元素。
    arr.pop() => 3
    console.log(arr) => [1,2];
  3.unshift(arg)：在数组的开头追加arg
    arr.unshift("a","b","c") => ["a","b","c",1,2,3];
  4.shift()：在数组开头删除一个元素，并返回这个元素
    arr.shift() => 1
    console.log(arr) => [2,3];
四、数组元素替换
  splice(index,howmany,item1,.....,itemX):前两个参数必须，在index位置，删除howmany个元素，追加item1,.....,itemX元素。
    arr.splice(1,1,4,5,6) => [1,4,5,6,2,3];
五、数组排序
  sort(arg)：不传参数的情况下，按照字符串升序排列。传参的情况下，参数必须是一个函数。
  function sortNumber(a,b){
    return b-a;
  }
  arr.sort(sortNumber) => [3,2,1]
六、其他方法
  1.join(separator)：方法用于把数组中的所有元素放入一个字符串。separator做为分隔符，不传的情况下使用逗号。
    arr.join(" ") => "1 2 3";
  2.reverse()：颠倒数组中元素顺序。
    arr.reverse() => [3,2,1];
  3.forEach(function(currentValue, index, arr), thisValue)：循环数组，第一个参数必须是一个函数，第二个是修改this指向。
    function(currentValue, index, arr)：
      currentValue：当前循环的值
      index：当前循环的下标
      arr：当前循环的数组
    var sumNumber = 0;
    function sum(currentValue){
      sumNumber += currentValue;
    }
    arr.forEach(sum);
    console.log(sumNumber); => 6
  4.filter(function(currentValue,index,arr), thisValue)：创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。
    function filterFn(value){
      return value > 1;
    }
    console.log(arr.filter(filterFn)); => [2,3];
  5.map(function(currentValue,index,arr), thisValue)：返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
    function mapFn(value){
      return value + 1;
    }
    console.log(arr.map(mapFn)) => [2,3,4];
  6.reduce(function(total, currentValue, currentIndex, arr), initialValue)：接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。
    function reduceFn(total,value){
      return total + value;
    }
    console.log(arr.reduce(reduceFn,0)) => 6
  7.every(function(currentValue,index,arr), thisValue)：用于检测数组所有元素是否都符合指定条件（通过函数提供）。（全部满足条件,返回true,否则返回false）
    function everyFn1(value){
      return value > 0;
    }
    function everyFn2(value){
      return value > 1;
    }
    console.log(arr.every(everyFn1)) => true;
    console.log(arr.every(everyFn2)) => false;
  8.some(function(currentValue,index,arr),thisValue)：用于检测数组中的元素是否满足指定条件（函数提供）。（有一个元素满足条件返回true,否则返回false）
    function someFn1(value){
      return value > 1;
    }
    function someFn2(value){
      return value > 3;
    }
    console.log(arr.some(someFn1)); => true
    console.log(arr.some(someFn2)); => false
    
    
